#!/usr/bin/env node

const config = require('../config/config');
const port = normalizePort(process.env.PORT || '3000');

const app = require('../express');
app.set('port', port);

const server = require('http').createServer(app);


const mongoose = require('mongoose');
const debug = require('debug')('restful-service:server');
/**
 * 
const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8000 });
// const wss = new WebSocket.Server({ server, port: 8000 });

// https://www.npmjs.com/package/ws#client-authentication
wss.on('connection', function connection(ws) {
  // NOTE: SOCKET URL: 'ws://127.0.0.1:8000' 
  app.set('wss', wss);
  app.set('ws', ws);

  ws.on('message', function incoming(message) {
    console.count('msg...')
    ws.send(__filename + ' received: ' + message);
  });

  ws.send('connected!');
});

 */
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
// app.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind)
}

config.mongooseInit(mongoose, config.mongoUri)
